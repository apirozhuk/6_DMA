
6_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001270  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080013a0  080013a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080013a0  080013a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080013a0  080013a0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013a0  080013a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013a0  080013a0  000113a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080013a4  080013a4  000113a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080013a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  2000000c  080013b4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  080013b4  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000046af  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000113d  00000000  00000000  000246e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004a8  00000000  00000000  00025828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000410  00000000  00000000  00025cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012c16  00000000  00000000  000260e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005ce7  00000000  00000000  00038cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068a80  00000000  00000000  0003e9dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a745d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001120  00000000  00000000  000a74b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000000c 	.word	0x2000000c
 800014c:	00000000 	.word	0x00000000
 8000150:	08001388 	.word	0x08001388

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000010 	.word	0x20000010
 800016c:	08001388 	.word	0x08001388

08000170 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000174:	4b15      	ldr	r3, [pc, #84]	; (80001cc <SystemInit+0x5c>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a14      	ldr	r2, [pc, #80]	; (80001cc <SystemInit+0x5c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <SystemInit+0x5c>)
 8000182:	685a      	ldr	r2, [r3, #4]
 8000184:	4911      	ldr	r1, [pc, #68]	; (80001cc <SystemInit+0x5c>)
 8000186:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <SystemInit+0x60>)
 8000188:	4013      	ands	r3, r2
 800018a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800018c:	4b0f      	ldr	r3, [pc, #60]	; (80001cc <SystemInit+0x5c>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a0e      	ldr	r2, [pc, #56]	; (80001cc <SystemInit+0x5c>)
 8000192:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800019a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800019c:	4b0b      	ldr	r3, [pc, #44]	; (80001cc <SystemInit+0x5c>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	4a0a      	ldr	r2, [pc, #40]	; (80001cc <SystemInit+0x5c>)
 80001a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80001a6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80001a8:	4b08      	ldr	r3, [pc, #32]	; (80001cc <SystemInit+0x5c>)
 80001aa:	685b      	ldr	r3, [r3, #4]
 80001ac:	4a07      	ldr	r2, [pc, #28]	; (80001cc <SystemInit+0x5c>)
 80001ae:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80001b2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80001b4:	4b05      	ldr	r3, [pc, #20]	; (80001cc <SystemInit+0x5c>)
 80001b6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80001ba:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <SystemInit+0x64>)
 80001be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80001c2:	609a      	str	r2, [r3, #8]
#endif 
}
 80001c4:	bf00      	nop
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bc80      	pop	{r7}
 80001ca:	4770      	bx	lr
 80001cc:	40021000 	.word	0x40021000
 80001d0:	f8ff0000 	.word	0xf8ff0000
 80001d4:	e000ed00 	.word	0xe000ed00

080001d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001dc:	4b08      	ldr	r3, [pc, #32]	; (8000200 <HAL_Init+0x28>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a07      	ldr	r2, [pc, #28]	; (8000200 <HAL_Init+0x28>)
 80001e2:	f043 0310 	orr.w	r3, r3, #16
 80001e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001e8:	2003      	movs	r0, #3
 80001ea:	f000 fd9f 	bl	8000d2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001ee:	200f      	movs	r0, #15
 80001f0:	f000 f80e 	bl	8000210 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001f4:	f000 f806 	bl	8000204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001f8:	2300      	movs	r3, #0
}
 80001fa:	4618      	mov	r0, r3
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	40022000 	.word	0x40022000

08000204 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000208:	bf00      	nop
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr

08000210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000218:	4b12      	ldr	r3, [pc, #72]	; (8000264 <HAL_InitTick+0x54>)
 800021a:	681a      	ldr	r2, [r3, #0]
 800021c:	4b12      	ldr	r3, [pc, #72]	; (8000268 <HAL_InitTick+0x58>)
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	4619      	mov	r1, r3
 8000222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000226:	fbb3 f3f1 	udiv	r3, r3, r1
 800022a:	fbb2 f3f3 	udiv	r3, r2, r3
 800022e:	4618      	mov	r0, r3
 8000230:	f000 fda3 	bl	8000d7a <HAL_SYSTICK_Config>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800023a:	2301      	movs	r3, #1
 800023c:	e00e      	b.n	800025c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	2b0f      	cmp	r3, #15
 8000242:	d80a      	bhi.n	800025a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000244:	2200      	movs	r2, #0
 8000246:	6879      	ldr	r1, [r7, #4]
 8000248:	f04f 30ff 	mov.w	r0, #4294967295
 800024c:	f000 fd79 	bl	8000d42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000250:	4a06      	ldr	r2, [pc, #24]	; (800026c <HAL_InitTick+0x5c>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000256:	2300      	movs	r3, #0
 8000258:	e000      	b.n	800025c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800025a:	2301      	movs	r3, #1
}
 800025c:	4618      	mov	r0, r3
 800025e:	3708      	adds	r7, #8
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	20000000 	.word	0x20000000
 8000268:	20000008 	.word	0x20000008
 800026c:	20000004 	.word	0x20000004

08000270 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000274:	4b05      	ldr	r3, [pc, #20]	; (800028c <HAL_IncTick+0x1c>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	461a      	mov	r2, r3
 800027a:	4b05      	ldr	r3, [pc, #20]	; (8000290 <HAL_IncTick+0x20>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4413      	add	r3, r2
 8000280:	4a03      	ldr	r2, [pc, #12]	; (8000290 <HAL_IncTick+0x20>)
 8000282:	6013      	str	r3, [r2, #0]
}
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr
 800028c:	20000008 	.word	0x20000008
 8000290:	20000028 	.word	0x20000028

08000294 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
  return uwTick;
 8000298:	4b02      	ldr	r3, [pc, #8]	; (80002a4 <HAL_GetTick+0x10>)
 800029a:	681b      	ldr	r3, [r3, #0]
}
 800029c:	4618      	mov	r0, r3
 800029e:	46bd      	mov	sp, r7
 80002a0:	bc80      	pop	{r7}
 80002a2:	4770      	bx	lr
 80002a4:	20000028 	.word	0x20000028

080002a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b086      	sub	sp, #24
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80002b0:	2300      	movs	r3, #0
 80002b2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80002b4:	2300      	movs	r3, #0
 80002b6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80002b8:	2300      	movs	r3, #0
 80002ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80002bc:	2300      	movs	r3, #0
 80002be:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d101      	bne.n	80002ca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80002c6:	2301      	movs	r3, #1
 80002c8:	e0be      	b.n	8000448 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	689b      	ldr	r3, [r3, #8]
 80002ce:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d109      	bne.n	80002ec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2200      	movs	r2, #0
 80002dc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	2200      	movs	r2, #0
 80002e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80002e6:	6878      	ldr	r0, [r7, #4]
 80002e8:	f000 f8b6 	bl	8000458 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80002ec:	6878      	ldr	r0, [r7, #4]
 80002ee:	f000 fbc3 	bl	8000a78 <ADC_ConversionStop_Disable>
 80002f2:	4603      	mov	r3, r0
 80002f4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002fa:	f003 0310 	and.w	r3, r3, #16
 80002fe:	2b00      	cmp	r3, #0
 8000300:	f040 8099 	bne.w	8000436 <HAL_ADC_Init+0x18e>
 8000304:	7dfb      	ldrb	r3, [r7, #23]
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8095 	bne.w	8000436 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000310:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000314:	f023 0302 	bic.w	r3, r3, #2
 8000318:	f043 0202 	orr.w	r2, r3, #2
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000328:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	7b1b      	ldrb	r3, [r3, #12]
 800032e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000330:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000332:	68ba      	ldr	r2, [r7, #8]
 8000334:	4313      	orrs	r3, r2
 8000336:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	689b      	ldr	r3, [r3, #8]
 800033c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000340:	d003      	beq.n	800034a <HAL_ADC_Init+0xa2>
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	689b      	ldr	r3, [r3, #8]
 8000346:	2b01      	cmp	r3, #1
 8000348:	d102      	bne.n	8000350 <HAL_ADC_Init+0xa8>
 800034a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800034e:	e000      	b.n	8000352 <HAL_ADC_Init+0xaa>
 8000350:	2300      	movs	r3, #0
 8000352:	693a      	ldr	r2, [r7, #16]
 8000354:	4313      	orrs	r3, r2
 8000356:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	7d1b      	ldrb	r3, [r3, #20]
 800035c:	2b01      	cmp	r3, #1
 800035e:	d119      	bne.n	8000394 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	7b1b      	ldrb	r3, [r3, #12]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d109      	bne.n	800037c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	3b01      	subs	r3, #1
 800036e:	035a      	lsls	r2, r3, #13
 8000370:	693b      	ldr	r3, [r7, #16]
 8000372:	4313      	orrs	r3, r2
 8000374:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000378:	613b      	str	r3, [r7, #16]
 800037a:	e00b      	b.n	8000394 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000380:	f043 0220 	orr.w	r2, r3, #32
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800038c:	f043 0201 	orr.w	r2, r3, #1
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	685b      	ldr	r3, [r3, #4]
 800039a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	693a      	ldr	r2, [r7, #16]
 80003a4:	430a      	orrs	r2, r1
 80003a6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	689a      	ldr	r2, [r3, #8]
 80003ae:	4b28      	ldr	r3, [pc, #160]	; (8000450 <HAL_ADC_Init+0x1a8>)
 80003b0:	4013      	ands	r3, r2
 80003b2:	687a      	ldr	r2, [r7, #4]
 80003b4:	6812      	ldr	r2, [r2, #0]
 80003b6:	68b9      	ldr	r1, [r7, #8]
 80003b8:	430b      	orrs	r3, r1
 80003ba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	689b      	ldr	r3, [r3, #8]
 80003c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003c4:	d003      	beq.n	80003ce <HAL_ADC_Init+0x126>
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	689b      	ldr	r3, [r3, #8]
 80003ca:	2b01      	cmp	r3, #1
 80003cc:	d104      	bne.n	80003d8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	691b      	ldr	r3, [r3, #16]
 80003d2:	3b01      	subs	r3, #1
 80003d4:	051b      	lsls	r3, r3, #20
 80003d6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003de:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	68fa      	ldr	r2, [r7, #12]
 80003e8:	430a      	orrs	r2, r1
 80003ea:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	689a      	ldr	r2, [r3, #8]
 80003f2:	4b18      	ldr	r3, [pc, #96]	; (8000454 <HAL_ADC_Init+0x1ac>)
 80003f4:	4013      	ands	r3, r2
 80003f6:	68ba      	ldr	r2, [r7, #8]
 80003f8:	429a      	cmp	r2, r3
 80003fa:	d10b      	bne.n	8000414 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	2200      	movs	r2, #0
 8000400:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000406:	f023 0303 	bic.w	r3, r3, #3
 800040a:	f043 0201 	orr.w	r2, r3, #1
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000412:	e018      	b.n	8000446 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000418:	f023 0312 	bic.w	r3, r3, #18
 800041c:	f043 0210 	orr.w	r2, r3, #16
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000428:	f043 0201 	orr.w	r2, r3, #1
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000430:	2301      	movs	r3, #1
 8000432:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000434:	e007      	b.n	8000446 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800043a:	f043 0210 	orr.w	r2, r3, #16
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000442:	2301      	movs	r3, #1
 8000444:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000446:	7dfb      	ldrb	r3, [r7, #23]
}
 8000448:	4618      	mov	r0, r3
 800044a:	3718      	adds	r7, #24
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	ffe1f7fd 	.word	0xffe1f7fd
 8000454:	ff1f0efe 	.word	0xff1f0efe

08000458 <HAL_ADC_MspInit>:
  * @brief  Initializes the ADC MSP.
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */ 
}
 8000460:	bf00      	nop
 8000462:	370c      	adds	r7, #12
 8000464:	46bd      	mov	sp, r7
 8000466:	bc80      	pop	{r7}
 8000468:	4770      	bx	lr
	...

0800046c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b086      	sub	sp, #24
 8000470:	af00      	add	r7, sp, #0
 8000472:	60f8      	str	r0, [r7, #12]
 8000474:	60b9      	str	r1, [r7, #8]
 8000476:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000478:	2300      	movs	r3, #0
 800047a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a64      	ldr	r2, [pc, #400]	; (8000614 <HAL_ADC_Start_DMA+0x1a8>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d004      	beq.n	8000490 <HAL_ADC_Start_DMA+0x24>
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a63      	ldr	r2, [pc, #396]	; (8000618 <HAL_ADC_Start_DMA+0x1ac>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d106      	bne.n	800049e <HAL_ADC_Start_DMA+0x32>
 8000490:	4b60      	ldr	r3, [pc, #384]	; (8000614 <HAL_ADC_Start_DMA+0x1a8>)
 8000492:	685b      	ldr	r3, [r3, #4]
 8000494:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000498:	2b00      	cmp	r3, #0
 800049a:	f040 80b3 	bne.w	8000604 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d101      	bne.n	80004ac <HAL_ADC_Start_DMA+0x40>
 80004a8:	2302      	movs	r3, #2
 80004aa:	e0ae      	b.n	800060a <HAL_ADC_Start_DMA+0x19e>
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	2201      	movs	r2, #1
 80004b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80004b4:	68f8      	ldr	r0, [r7, #12]
 80004b6:	f000 fa8d 	bl	80009d4 <ADC_Enable>
 80004ba:	4603      	mov	r3, r0
 80004bc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80004be:	7dfb      	ldrb	r3, [r7, #23]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	f040 809a 	bne.w	80005fa <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80004ce:	f023 0301 	bic.w	r3, r3, #1
 80004d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a4e      	ldr	r2, [pc, #312]	; (8000618 <HAL_ADC_Start_DMA+0x1ac>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d105      	bne.n	80004f0 <HAL_ADC_Start_DMA+0x84>
 80004e4:	4b4b      	ldr	r3, [pc, #300]	; (8000614 <HAL_ADC_Start_DMA+0x1a8>)
 80004e6:	685b      	ldr	r3, [r3, #4]
 80004e8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d115      	bne.n	800051c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004f4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	685b      	ldr	r3, [r3, #4]
 8000502:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000506:	2b00      	cmp	r3, #0
 8000508:	d026      	beq.n	8000558 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800050e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000512:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800051a:	e01d      	b.n	8000558 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000520:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a39      	ldr	r2, [pc, #228]	; (8000614 <HAL_ADC_Start_DMA+0x1a8>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d004      	beq.n	800053c <HAL_ADC_Start_DMA+0xd0>
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a38      	ldr	r2, [pc, #224]	; (8000618 <HAL_ADC_Start_DMA+0x1ac>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d10d      	bne.n	8000558 <HAL_ADC_Start_DMA+0xec>
 800053c:	4b35      	ldr	r3, [pc, #212]	; (8000614 <HAL_ADC_Start_DMA+0x1a8>)
 800053e:	685b      	ldr	r3, [r3, #4]
 8000540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000544:	2b00      	cmp	r3, #0
 8000546:	d007      	beq.n	8000558 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800054c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000550:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800055c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000560:	2b00      	cmp	r3, #0
 8000562:	d006      	beq.n	8000572 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000568:	f023 0206 	bic.w	r2, r3, #6
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000570:	e002      	b.n	8000578 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	2200      	movs	r2, #0
 8000576:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	2200      	movs	r2, #0
 800057c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	6a1b      	ldr	r3, [r3, #32]
 8000584:	4a25      	ldr	r2, [pc, #148]	; (800061c <HAL_ADC_Start_DMA+0x1b0>)
 8000586:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	6a1b      	ldr	r3, [r3, #32]
 800058c:	4a24      	ldr	r2, [pc, #144]	; (8000620 <HAL_ADC_Start_DMA+0x1b4>)
 800058e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	6a1b      	ldr	r3, [r3, #32]
 8000594:	4a23      	ldr	r2, [pc, #140]	; (8000624 <HAL_ADC_Start_DMA+0x1b8>)
 8000596:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f06f 0202 	mvn.w	r2, #2
 80005a0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	689a      	ldr	r2, [r3, #8]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005b0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	6a18      	ldr	r0, [r3, #32]
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	334c      	adds	r3, #76	; 0x4c
 80005bc:	4619      	mov	r1, r3
 80005be:	68ba      	ldr	r2, [r7, #8]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f000 fc41 	bl	8000e48 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	689b      	ldr	r3, [r3, #8]
 80005cc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80005d0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80005d4:	d108      	bne.n	80005e8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	689a      	ldr	r2, [r3, #8]
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80005e4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80005e6:	e00f      	b.n	8000608 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	689a      	ldr	r2, [r3, #8]
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80005f6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80005f8:	e006      	b.n	8000608 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	2200      	movs	r2, #0
 80005fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000602:	e001      	b.n	8000608 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000604:	2301      	movs	r3, #1
 8000606:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000608:	7dfb      	ldrb	r3, [r7, #23]
}
 800060a:	4618      	mov	r0, r3
 800060c:	3718      	adds	r7, #24
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40012400 	.word	0x40012400
 8000618:	40012800 	.word	0x40012800
 800061c:	08000aed 	.word	0x08000aed
 8000620:	08000b69 	.word	0x08000b69
 8000624:	08000b85 	.word	0x08000b85

08000628 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	f003 0320 	and.w	r3, r3, #32
 800063a:	2b20      	cmp	r3, #32
 800063c:	d140      	bne.n	80006c0 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f003 0302 	and.w	r3, r3, #2
 8000648:	2b02      	cmp	r3, #2
 800064a:	d139      	bne.n	80006c0 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000650:	f003 0310 	and.w	r3, r3, #16
 8000654:	2b00      	cmp	r3, #0
 8000656:	d105      	bne.n	8000664 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800065c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	689b      	ldr	r3, [r3, #8]
 800066a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800066e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000672:	d11d      	bne.n	80006b0 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000678:	2b00      	cmp	r3, #0
 800067a:	d119      	bne.n	80006b0 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	685a      	ldr	r2, [r3, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f022 0220 	bic.w	r2, r2, #32
 800068a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000690:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800069c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d105      	bne.n	80006b0 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006a8:	f043 0201 	orr.w	r2, r3, #1
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f000 fdeb 	bl	800128c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f06f 0212 	mvn.w	r2, #18
 80006be:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ca:	2b80      	cmp	r3, #128	; 0x80
 80006cc:	d14f      	bne.n	800076e <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f003 0304 	and.w	r3, r3, #4
 80006d8:	2b04      	cmp	r3, #4
 80006da:	d148      	bne.n	800076e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006e0:	f003 0310 	and.w	r3, r3, #16
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d105      	bne.n	80006f4 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006ec:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	689b      	ldr	r3, [r3, #8]
 80006fa:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80006fe:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000702:	d012      	beq.n	800072a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800070e:	2b00      	cmp	r3, #0
 8000710:	d125      	bne.n	800075e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	689b      	ldr	r3, [r3, #8]
 8000718:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800071c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000720:	d11d      	bne.n	800075e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000726:	2b00      	cmp	r3, #0
 8000728:	d119      	bne.n	800075e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	685a      	ldr	r2, [r3, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000738:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800073e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800074a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800074e:	2b00      	cmp	r3, #0
 8000750:	d105      	bne.n	800075e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000756:	f043 0201 	orr.w	r2, r3, #1
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f000 fa2a 	bl	8000bb8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f06f 020c 	mvn.w	r2, #12
 800076c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000778:	2b40      	cmp	r3, #64	; 0x40
 800077a:	d114      	bne.n	80007a6 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	2b01      	cmp	r3, #1
 8000788:	d10d      	bne.n	80007a6 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800078e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f000 f812 	bl	80007c0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f06f 0201 	mvn.w	r2, #1
 80007a4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80007ae:	b480      	push	{r7}
 80007b0:	b083      	sub	sp, #12
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr

080007c0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80007c8:	bf00      	nop
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr

080007d2 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80007d2:	b480      	push	{r7}
 80007d4:	b083      	sub	sp, #12
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007ee:	2300      	movs	r3, #0
 80007f0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d101      	bne.n	8000804 <HAL_ADC_ConfigChannel+0x20>
 8000800:	2302      	movs	r3, #2
 8000802:	e0dc      	b.n	80009be <HAL_ADC_ConfigChannel+0x1da>
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2201      	movs	r2, #1
 8000808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	2b06      	cmp	r3, #6
 8000812:	d81c      	bhi.n	800084e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	685a      	ldr	r2, [r3, #4]
 800081e:	4613      	mov	r3, r2
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	4413      	add	r3, r2
 8000824:	3b05      	subs	r3, #5
 8000826:	221f      	movs	r2, #31
 8000828:	fa02 f303 	lsl.w	r3, r2, r3
 800082c:	43db      	mvns	r3, r3
 800082e:	4019      	ands	r1, r3
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	6818      	ldr	r0, [r3, #0]
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	685a      	ldr	r2, [r3, #4]
 8000838:	4613      	mov	r3, r2
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	4413      	add	r3, r2
 800083e:	3b05      	subs	r3, #5
 8000840:	fa00 f203 	lsl.w	r2, r0, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	430a      	orrs	r2, r1
 800084a:	635a      	str	r2, [r3, #52]	; 0x34
 800084c:	e03c      	b.n	80008c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	2b0c      	cmp	r3, #12
 8000854:	d81c      	bhi.n	8000890 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	685a      	ldr	r2, [r3, #4]
 8000860:	4613      	mov	r3, r2
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	4413      	add	r3, r2
 8000866:	3b23      	subs	r3, #35	; 0x23
 8000868:	221f      	movs	r2, #31
 800086a:	fa02 f303 	lsl.w	r3, r2, r3
 800086e:	43db      	mvns	r3, r3
 8000870:	4019      	ands	r1, r3
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	6818      	ldr	r0, [r3, #0]
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	685a      	ldr	r2, [r3, #4]
 800087a:	4613      	mov	r3, r2
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	4413      	add	r3, r2
 8000880:	3b23      	subs	r3, #35	; 0x23
 8000882:	fa00 f203 	lsl.w	r2, r0, r3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	430a      	orrs	r2, r1
 800088c:	631a      	str	r2, [r3, #48]	; 0x30
 800088e:	e01b      	b.n	80008c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	685a      	ldr	r2, [r3, #4]
 800089a:	4613      	mov	r3, r2
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	4413      	add	r3, r2
 80008a0:	3b41      	subs	r3, #65	; 0x41
 80008a2:	221f      	movs	r2, #31
 80008a4:	fa02 f303 	lsl.w	r3, r2, r3
 80008a8:	43db      	mvns	r3, r3
 80008aa:	4019      	ands	r1, r3
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	6818      	ldr	r0, [r3, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	685a      	ldr	r2, [r3, #4]
 80008b4:	4613      	mov	r3, r2
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	4413      	add	r3, r2
 80008ba:	3b41      	subs	r3, #65	; 0x41
 80008bc:	fa00 f203 	lsl.w	r2, r0, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	430a      	orrs	r2, r1
 80008c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b09      	cmp	r3, #9
 80008ce:	d91c      	bls.n	800090a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	68d9      	ldr	r1, [r3, #12]
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	4613      	mov	r3, r2
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	4413      	add	r3, r2
 80008e0:	3b1e      	subs	r3, #30
 80008e2:	2207      	movs	r2, #7
 80008e4:	fa02 f303 	lsl.w	r3, r2, r3
 80008e8:	43db      	mvns	r3, r3
 80008ea:	4019      	ands	r1, r3
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	6898      	ldr	r0, [r3, #8]
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	4613      	mov	r3, r2
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	4413      	add	r3, r2
 80008fa:	3b1e      	subs	r3, #30
 80008fc:	fa00 f203 	lsl.w	r2, r0, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	430a      	orrs	r2, r1
 8000906:	60da      	str	r2, [r3, #12]
 8000908:	e019      	b.n	800093e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	6919      	ldr	r1, [r3, #16]
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4613      	mov	r3, r2
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	4413      	add	r3, r2
 800091a:	2207      	movs	r2, #7
 800091c:	fa02 f303 	lsl.w	r3, r2, r3
 8000920:	43db      	mvns	r3, r3
 8000922:	4019      	ands	r1, r3
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	6898      	ldr	r0, [r3, #8]
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	4613      	mov	r3, r2
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	4413      	add	r3, r2
 8000932:	fa00 f203 	lsl.w	r2, r0, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	430a      	orrs	r2, r1
 800093c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	2b10      	cmp	r3, #16
 8000944:	d003      	beq.n	800094e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800094a:	2b11      	cmp	r3, #17
 800094c:	d132      	bne.n	80009b4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a1d      	ldr	r2, [pc, #116]	; (80009c8 <HAL_ADC_ConfigChannel+0x1e4>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d125      	bne.n	80009a4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	689b      	ldr	r3, [r3, #8]
 800095e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000962:	2b00      	cmp	r3, #0
 8000964:	d126      	bne.n	80009b4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	689a      	ldr	r2, [r3, #8]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000974:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b10      	cmp	r3, #16
 800097c:	d11a      	bne.n	80009b4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800097e:	4b13      	ldr	r3, [pc, #76]	; (80009cc <HAL_ADC_ConfigChannel+0x1e8>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a13      	ldr	r2, [pc, #76]	; (80009d0 <HAL_ADC_ConfigChannel+0x1ec>)
 8000984:	fba2 2303 	umull	r2, r3, r2, r3
 8000988:	0c9a      	lsrs	r2, r3, #18
 800098a:	4613      	mov	r3, r2
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	4413      	add	r3, r2
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000994:	e002      	b.n	800099c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	3b01      	subs	r3, #1
 800099a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d1f9      	bne.n	8000996 <HAL_ADC_ConfigChannel+0x1b2>
 80009a2:	e007      	b.n	80009b4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009a8:	f043 0220 	orr.w	r2, r3, #32
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80009b0:	2301      	movs	r3, #1
 80009b2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2200      	movs	r2, #0
 80009b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80009bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3714      	adds	r7, #20
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr
 80009c8:	40012400 	.word	0x40012400
 80009cc:	20000000 	.word	0x20000000
 80009d0:	431bde83 	.word	0x431bde83

080009d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	689b      	ldr	r3, [r3, #8]
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d039      	beq.n	8000a66 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	689a      	ldr	r2, [r3, #8]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f042 0201 	orr.w	r2, r2, #1
 8000a00:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000a02:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <ADC_Enable+0x9c>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a1b      	ldr	r2, [pc, #108]	; (8000a74 <ADC_Enable+0xa0>)
 8000a08:	fba2 2303 	umull	r2, r3, r2, r3
 8000a0c:	0c9b      	lsrs	r3, r3, #18
 8000a0e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000a10:	e002      	b.n	8000a18 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	3b01      	subs	r3, #1
 8000a16:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d1f9      	bne.n	8000a12 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000a1e:	f7ff fc39 	bl	8000294 <HAL_GetTick>
 8000a22:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000a24:	e018      	b.n	8000a58 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000a26:	f7ff fc35 	bl	8000294 <HAL_GetTick>
 8000a2a:	4602      	mov	r2, r0
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	1ad3      	subs	r3, r2, r3
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d911      	bls.n	8000a58 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a38:	f043 0210 	orr.w	r2, r3, #16
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a44:	f043 0201 	orr.w	r2, r3, #1
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8000a54:	2301      	movs	r3, #1
 8000a56:	e007      	b.n	8000a68 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d1df      	bne.n	8000a26 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000a66:	2300      	movs	r3, #0
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000000 	.word	0x20000000
 8000a74:	431bde83 	.word	0x431bde83

08000a78 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d127      	bne.n	8000ae2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	689a      	ldr	r2, [r3, #8]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f022 0201 	bic.w	r2, r2, #1
 8000aa0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000aa2:	f7ff fbf7 	bl	8000294 <HAL_GetTick>
 8000aa6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000aa8:	e014      	b.n	8000ad4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000aaa:	f7ff fbf3 	bl	8000294 <HAL_GetTick>
 8000aae:	4602      	mov	r2, r0
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	1ad3      	subs	r3, r2, r3
 8000ab4:	2b02      	cmp	r3, #2
 8000ab6:	d90d      	bls.n	8000ad4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000abc:	f043 0210 	orr.w	r2, r3, #16
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac8:	f043 0201 	orr.w	r2, r3, #1
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	e007      	b.n	8000ae4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d0e3      	beq.n	8000aaa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000ae2:	2300      	movs	r3, #0
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000af8:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000afe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d127      	bne.n	8000b56 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b0a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000b1c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000b20:	d115      	bne.n	8000b4e <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d111      	bne.n	8000b4e <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d105      	bne.n	8000b4e <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b46:	f043 0201 	orr.w	r2, r3, #1
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000b4e:	68f8      	ldr	r0, [r7, #12]
 8000b50:	f000 fb9c 	bl	800128c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000b54:	e004      	b.n	8000b60 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	6a1b      	ldr	r3, [r3, #32]
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	4798      	blx	r3
}
 8000b60:	bf00      	nop
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b74:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000b76:	68f8      	ldr	r0, [r7, #12]
 8000b78:	f7ff fe19 	bl	80007ae <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000b7c:	bf00      	nop
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b90:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba2:	f043 0204 	orr.w	r2, r3, #4
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000baa:	68f8      	ldr	r0, [r7, #12]
 8000bac:	f7ff fe11 	bl	80007d2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000bb0:	bf00      	nop
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr
	...

08000bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be8:	4013      	ands	r3, r2
 8000bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bfe:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	60d3      	str	r3, [r2, #12]
}
 8000c04:	bf00      	nop
 8000c06:	3714      	adds	r7, #20
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c18:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <__NVIC_GetPriorityGrouping+0x18>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	0a1b      	lsrs	r3, r3, #8
 8000c1e:	f003 0307 	and.w	r3, r3, #7
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	6039      	str	r1, [r7, #0]
 8000c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	db0a      	blt.n	8000c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	490c      	ldr	r1, [pc, #48]	; (8000c7c <__NVIC_SetPriority+0x4c>)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	0112      	lsls	r2, r2, #4
 8000c50:	b2d2      	uxtb	r2, r2
 8000c52:	440b      	add	r3, r1
 8000c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c58:	e00a      	b.n	8000c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4908      	ldr	r1, [pc, #32]	; (8000c80 <__NVIC_SetPriority+0x50>)
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	f003 030f 	and.w	r3, r3, #15
 8000c66:	3b04      	subs	r3, #4
 8000c68:	0112      	lsls	r2, r2, #4
 8000c6a:	b2d2      	uxtb	r2, r2
 8000c6c:	440b      	add	r3, r1
 8000c6e:	761a      	strb	r2, [r3, #24]
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000e100 	.word	0xe000e100
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b089      	sub	sp, #36	; 0x24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	f1c3 0307 	rsb	r3, r3, #7
 8000c9e:	2b04      	cmp	r3, #4
 8000ca0:	bf28      	it	cs
 8000ca2:	2304      	movcs	r3, #4
 8000ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3304      	adds	r3, #4
 8000caa:	2b06      	cmp	r3, #6
 8000cac:	d902      	bls.n	8000cb4 <NVIC_EncodePriority+0x30>
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3b03      	subs	r3, #3
 8000cb2:	e000      	b.n	8000cb6 <NVIC_EncodePriority+0x32>
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	401a      	ands	r2, r3
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd6:	43d9      	mvns	r1, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	4313      	orrs	r3, r2
         );
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3724      	adds	r7, #36	; 0x24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr

08000ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cf8:	d301      	bcc.n	8000cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e00f      	b.n	8000d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <SysTick_Config+0x40>)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d06:	210f      	movs	r1, #15
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0c:	f7ff ff90 	bl	8000c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <SysTick_Config+0x40>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d16:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <SysTick_Config+0x40>)
 8000d18:	2207      	movs	r2, #7
 8000d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	e000e010 	.word	0xe000e010

08000d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f7ff ff49 	bl	8000bcc <__NVIC_SetPriorityGrouping>
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b086      	sub	sp, #24
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	4603      	mov	r3, r0
 8000d4a:	60b9      	str	r1, [r7, #8]
 8000d4c:	607a      	str	r2, [r7, #4]
 8000d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d54:	f7ff ff5e 	bl	8000c14 <__NVIC_GetPriorityGrouping>
 8000d58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	68b9      	ldr	r1, [r7, #8]
 8000d5e:	6978      	ldr	r0, [r7, #20]
 8000d60:	f7ff ff90 	bl	8000c84 <NVIC_EncodePriority>
 8000d64:	4602      	mov	r2, r0
 8000d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ff5f 	bl	8000c30 <__NVIC_SetPriority>
}
 8000d72:	bf00      	nop
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f7ff ffb0 	bl	8000ce8 <SysTick_Config>
 8000d88:	4603      	mov	r3, r0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
	...

08000d94 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d101      	bne.n	8000daa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e043      	b.n	8000e32 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	461a      	mov	r2, r3
 8000db0:	4b22      	ldr	r3, [pc, #136]	; (8000e3c <HAL_DMA_Init+0xa8>)
 8000db2:	4413      	add	r3, r2
 8000db4:	4a22      	ldr	r2, [pc, #136]	; (8000e40 <HAL_DMA_Init+0xac>)
 8000db6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dba:	091b      	lsrs	r3, r3, #4
 8000dbc:	009a      	lsls	r2, r3, #2
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a1f      	ldr	r2, [pc, #124]	; (8000e44 <HAL_DMA_Init+0xb0>)
 8000dc6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2202      	movs	r2, #2
 8000dcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000dde:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000de2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000dec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000df8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	69db      	ldr	r3, [r3, #28]
 8000e0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e0c:	68fa      	ldr	r2, [r7, #12]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2201      	movs	r2, #1
 8000e24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	bffdfff8 	.word	0xbffdfff8
 8000e40:	cccccccd 	.word	0xcccccccd
 8000e44:	40020000 	.word	0x40020000

08000e48 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
 8000e54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e56:	2300      	movs	r3, #0
 8000e58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d101      	bne.n	8000e68 <HAL_DMA_Start_IT+0x20>
 8000e64:	2302      	movs	r3, #2
 8000e66:	e04a      	b.n	8000efe <HAL_DMA_Start_IT+0xb6>
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d13a      	bne.n	8000ef0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	2200      	movs	r2, #0
 8000e86:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f022 0201 	bic.w	r2, r2, #1
 8000e96:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	68b9      	ldr	r1, [r7, #8]
 8000e9e:	68f8      	ldr	r0, [r7, #12]
 8000ea0:	f000 f938 	bl	8001114 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d008      	beq.n	8000ebe <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f042 020e 	orr.w	r2, r2, #14
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	e00f      	b.n	8000ede <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f022 0204 	bic.w	r2, r2, #4
 8000ecc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f042 020a 	orr.w	r2, r2, #10
 8000edc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f042 0201 	orr.w	r2, r2, #1
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	e005      	b.n	8000efc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000efc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	2204      	movs	r2, #4
 8000f26:	409a      	lsls	r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d04f      	beq.n	8000fd0 <HAL_DMA_IRQHandler+0xc8>
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	f003 0304 	and.w	r3, r3, #4
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d04a      	beq.n	8000fd0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 0320 	and.w	r3, r3, #32
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d107      	bne.n	8000f58 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f022 0204 	bic.w	r2, r2, #4
 8000f56:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a66      	ldr	r2, [pc, #408]	; (80010f8 <HAL_DMA_IRQHandler+0x1f0>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d029      	beq.n	8000fb6 <HAL_DMA_IRQHandler+0xae>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a65      	ldr	r2, [pc, #404]	; (80010fc <HAL_DMA_IRQHandler+0x1f4>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d022      	beq.n	8000fb2 <HAL_DMA_IRQHandler+0xaa>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a63      	ldr	r2, [pc, #396]	; (8001100 <HAL_DMA_IRQHandler+0x1f8>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d01a      	beq.n	8000fac <HAL_DMA_IRQHandler+0xa4>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a62      	ldr	r2, [pc, #392]	; (8001104 <HAL_DMA_IRQHandler+0x1fc>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d012      	beq.n	8000fa6 <HAL_DMA_IRQHandler+0x9e>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a60      	ldr	r2, [pc, #384]	; (8001108 <HAL_DMA_IRQHandler+0x200>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d00a      	beq.n	8000fa0 <HAL_DMA_IRQHandler+0x98>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a5f      	ldr	r2, [pc, #380]	; (800110c <HAL_DMA_IRQHandler+0x204>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d102      	bne.n	8000f9a <HAL_DMA_IRQHandler+0x92>
 8000f94:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f98:	e00e      	b.n	8000fb8 <HAL_DMA_IRQHandler+0xb0>
 8000f9a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f9e:	e00b      	b.n	8000fb8 <HAL_DMA_IRQHandler+0xb0>
 8000fa0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000fa4:	e008      	b.n	8000fb8 <HAL_DMA_IRQHandler+0xb0>
 8000fa6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000faa:	e005      	b.n	8000fb8 <HAL_DMA_IRQHandler+0xb0>
 8000fac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fb0:	e002      	b.n	8000fb8 <HAL_DMA_IRQHandler+0xb0>
 8000fb2:	2340      	movs	r3, #64	; 0x40
 8000fb4:	e000      	b.n	8000fb8 <HAL_DMA_IRQHandler+0xb0>
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	4a55      	ldr	r2, [pc, #340]	; (8001110 <HAL_DMA_IRQHandler+0x208>)
 8000fba:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	f000 8094 	beq.w	80010ee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000fce:	e08e      	b.n	80010ee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d056      	beq.n	800108e <HAL_DMA_IRQHandler+0x186>
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d051      	beq.n	800108e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0320 	and.w	r3, r3, #32
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d10b      	bne.n	8001010 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f022 020a 	bic.w	r2, r2, #10
 8001006:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2201      	movs	r2, #1
 800100c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a38      	ldr	r2, [pc, #224]	; (80010f8 <HAL_DMA_IRQHandler+0x1f0>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d029      	beq.n	800106e <HAL_DMA_IRQHandler+0x166>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a37      	ldr	r2, [pc, #220]	; (80010fc <HAL_DMA_IRQHandler+0x1f4>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d022      	beq.n	800106a <HAL_DMA_IRQHandler+0x162>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a35      	ldr	r2, [pc, #212]	; (8001100 <HAL_DMA_IRQHandler+0x1f8>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d01a      	beq.n	8001064 <HAL_DMA_IRQHandler+0x15c>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a34      	ldr	r2, [pc, #208]	; (8001104 <HAL_DMA_IRQHandler+0x1fc>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d012      	beq.n	800105e <HAL_DMA_IRQHandler+0x156>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a32      	ldr	r2, [pc, #200]	; (8001108 <HAL_DMA_IRQHandler+0x200>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d00a      	beq.n	8001058 <HAL_DMA_IRQHandler+0x150>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a31      	ldr	r2, [pc, #196]	; (800110c <HAL_DMA_IRQHandler+0x204>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d102      	bne.n	8001052 <HAL_DMA_IRQHandler+0x14a>
 800104c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001050:	e00e      	b.n	8001070 <HAL_DMA_IRQHandler+0x168>
 8001052:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001056:	e00b      	b.n	8001070 <HAL_DMA_IRQHandler+0x168>
 8001058:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800105c:	e008      	b.n	8001070 <HAL_DMA_IRQHandler+0x168>
 800105e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001062:	e005      	b.n	8001070 <HAL_DMA_IRQHandler+0x168>
 8001064:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001068:	e002      	b.n	8001070 <HAL_DMA_IRQHandler+0x168>
 800106a:	2320      	movs	r3, #32
 800106c:	e000      	b.n	8001070 <HAL_DMA_IRQHandler+0x168>
 800106e:	2302      	movs	r3, #2
 8001070:	4a27      	ldr	r2, [pc, #156]	; (8001110 <HAL_DMA_IRQHandler+0x208>)
 8001072:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001080:	2b00      	cmp	r3, #0
 8001082:	d034      	beq.n	80010ee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800108c:	e02f      	b.n	80010ee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	2208      	movs	r2, #8
 8001094:	409a      	lsls	r2, r3
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	4013      	ands	r3, r2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d028      	beq.n	80010f0 <HAL_DMA_IRQHandler+0x1e8>
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	f003 0308 	and.w	r3, r3, #8
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d023      	beq.n	80010f0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 020e 	bic.w	r2, r2, #14
 80010b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010c0:	2101      	movs	r1, #1
 80010c2:	fa01 f202 	lsl.w	r2, r1, r2
 80010c6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2201      	movs	r2, #1
 80010cc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2201      	movs	r2, #1
 80010d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d004      	beq.n	80010f0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	4798      	blx	r3
    }
  }
  return;
 80010ee:	bf00      	nop
 80010f0:	bf00      	nop
}
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40020008 	.word	0x40020008
 80010fc:	4002001c 	.word	0x4002001c
 8001100:	40020030 	.word	0x40020030
 8001104:	40020044 	.word	0x40020044
 8001108:	40020058 	.word	0x40020058
 800110c:	4002006c 	.word	0x4002006c
 8001110:	40020000 	.word	0x40020000

08001114 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
 8001120:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800112a:	2101      	movs	r1, #1
 800112c:	fa01 f202 	lsl.w	r2, r1, r2
 8001130:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	683a      	ldr	r2, [r7, #0]
 8001138:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	2b10      	cmp	r3, #16
 8001140:	d108      	bne.n	8001154 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001152:	e007      	b.n	8001164 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	68ba      	ldr	r2, [r7, #8]
 800115a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	60da      	str	r2, [r3, #12]
}
 8001164:	bf00      	nop
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr
	...

08001170 <ADC_Init>:

ADC_HandleTypeDef hadc1 = {0};


void ADC_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef adc1_ch1 = {0};
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]

	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8001180:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <ADC_Init+0x74>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	4a17      	ldr	r2, [pc, #92]	; (80011e4 <ADC_Init+0x74>)
 8001186:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800118a:	6193      	str	r3, [r2, #24]
	hadc1.Instance = ADC1;
 800118c:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <ADC_Init+0x78>)
 800118e:	4a17      	ldr	r2, [pc, #92]	; (80011ec <ADC_Init+0x7c>)
 8001190:	601a      	str	r2, [r3, #0]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <ADC_Init+0x78>)
 8001194:	2201      	movs	r2, #1
 8001196:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001198:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <ADC_Init+0x78>)
 800119a:	2200      	movs	r2, #0
 800119c:	605a      	str	r2, [r3, #4]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800119e:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <ADC_Init+0x78>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a4:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <ADC_Init+0x78>)
 80011a6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80011aa:	61da      	str	r2, [r3, #28]
	hadc1.Init.NbrOfConversion = 1;
 80011ac:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <ADC_Init+0x78>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	611a      	str	r2, [r3, #16]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011b2:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <ADC_Init+0x78>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
	hadc1.DMA_Handle = &hdma1;
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <ADC_Init+0x78>)
 80011ba:	4a0d      	ldr	r2, [pc, #52]	; (80011f0 <ADC_Init+0x80>)
 80011bc:	621a      	str	r2, [r3, #32]


	adc1_ch1.Channel = ADC_CHANNEL_0;
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
	adc1_ch1.Rank = ADC_REGULAR_RANK_1;
 80011c2:	2301      	movs	r3, #1
 80011c4:	60bb      	str	r3, [r7, #8]
	adc1_ch1.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80011c6:	2307      	movs	r3, #7
 80011c8:	60fb      	str	r3, [r7, #12]
	HAL_ADC_ConfigChannel(&hadc1, &adc1_ch1);
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	4619      	mov	r1, r3
 80011ce:	4806      	ldr	r0, [pc, #24]	; (80011e8 <ADC_Init+0x78>)
 80011d0:	f7ff fb08 	bl	80007e4 <HAL_ADC_ConfigChannel>
	HAL_ADC_Init(&hadc1);
 80011d4:	4804      	ldr	r0, [pc, #16]	; (80011e8 <ADC_Init+0x78>)
 80011d6:	f7ff f867 	bl	80002a8 <HAL_ADC_Init>
}
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40021000 	.word	0x40021000
 80011e8:	2000002c 	.word	0x2000002c
 80011ec:	40012400 	.word	0x40012400
 80011f0:	2000005c 	.word	0x2000005c

080011f4 <DMA_Init>:




void DMA_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <DMA_Init+0x50>)
 80011fa:	695b      	ldr	r3, [r3, #20]
 80011fc:	4a11      	ldr	r2, [pc, #68]	; (8001244 <DMA_Init+0x50>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6153      	str	r3, [r2, #20]
	hdma1.Instance = DMA1_Channel1;
 8001204:	4b10      	ldr	r3, [pc, #64]	; (8001248 <DMA_Init+0x54>)
 8001206:	4a11      	ldr	r2, [pc, #68]	; (800124c <DMA_Init+0x58>)
 8001208:	601a      	str	r2, [r3, #0]
	hdma1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <DMA_Init+0x54>)
 800120c:	2200      	movs	r2, #0
 800120e:	605a      	str	r2, [r3, #4]
	hdma1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001210:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <DMA_Init+0x54>)
 8001212:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001216:	615a      	str	r2, [r3, #20]
	hdma1.Init.MemInc = DMA_MINC_DISABLE;
 8001218:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <DMA_Init+0x54>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
	hdma1.Init.Mode = DMA_CIRCULAR;
 800121e:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <DMA_Init+0x54>)
 8001220:	2220      	movs	r2, #32
 8001222:	619a      	str	r2, [r3, #24]
	hdma1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001224:	4b08      	ldr	r3, [pc, #32]	; (8001248 <DMA_Init+0x54>)
 8001226:	f44f 7280 	mov.w	r2, #256	; 0x100
 800122a:	611a      	str	r2, [r3, #16]
	hdma1.Init.PeriphInc = DMA_PINC_DISABLE;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <DMA_Init+0x54>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
	hdma1.Init.Priority = DMA_PRIORITY_LOW;
 8001232:	4b05      	ldr	r3, [pc, #20]	; (8001248 <DMA_Init+0x54>)
 8001234:	2200      	movs	r2, #0
 8001236:	61da      	str	r2, [r3, #28]
	HAL_DMA_Init(&hdma1);
 8001238:	4803      	ldr	r0, [pc, #12]	; (8001248 <DMA_Init+0x54>)
 800123a:	f7ff fdab 	bl	8000d94 <HAL_DMA_Init>
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40021000 	.word	0x40021000
 8001248:	2000005c 	.word	0x2000005c
 800124c:	40020008 	.word	0x40020008

08001250 <main>:




int main(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	HAL_Init();
 8001254:	f7fe ffc0 	bl	80001d8 <HAL_Init>
	ADC_Init();
 8001258:	f7ff ff8a 	bl	8001170 <ADC_Init>
	DMA_Init();
 800125c:	f7ff ffca 	bl	80011f4 <DMA_Init>
	GPIO_Init();
 8001260:	f000 f82e 	bl	80012c0 <GPIO_Init>


	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&data, 100);
 8001264:	2264      	movs	r2, #100	; 0x64
 8001266:	4902      	ldr	r1, [pc, #8]	; (8001270 <main+0x20>)
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <main+0x24>)
 800126a:	f7ff f8ff 	bl	800046c <HAL_ADC_Start_DMA>
	while(1)
 800126e:	e7fe      	b.n	800126e <main+0x1e>
 8001270:	200000a0 	.word	0x200000a0
 8001274:	2000002c 	.word	0x2000002c

08001278 <ADC1_2_IRQHandler>:

	}
}

void ADC1_2_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
	 HAL_ADC_IRQHandler (&hadc1);
 800127c:	4802      	ldr	r0, [pc, #8]	; (8001288 <ADC1_2_IRQHandler+0x10>)
 800127e:	f7ff f9d3 	bl	8000628 <HAL_ADC_IRQHandler>
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	2000002c 	.word	0x2000002c

0800128c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef * hadc)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]

}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr
	...

080012a0 <DMA1_Channel1_IRQHandler>:

void DMA1_Channel1_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma1);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <DMA1_Channel1_IRQHandler+0x10>)
 80012a6:	f7ff fe2f 	bl	8000f08 <HAL_DMA_IRQHandler>
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	2000005c 	.word	0x2000005c

080012b4 <SysTick_Handler>:



void SysTick_Handler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80012b8:	f7fe ffda 	bl	8000270 <HAL_IncTick>
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}

080012c0 <GPIO_Init>:

void GPIO_Init(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80012c4:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <GPIO_Init+0x24>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	4a06      	ldr	r2, [pc, #24]	; (80012e4 <GPIO_Init+0x24>)
 80012ca:	f043 0304 	orr.w	r3, r3, #4
 80012ce:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= ~0xf;
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <GPIO_Init+0x28>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <GPIO_Init+0x28>)
 80012d6:	f023 030f 	bic.w	r3, r3, #15
 80012da:	6013      	str	r3, [r2, #0]
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010800 	.word	0x40010800

080012ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012ec:	480d      	ldr	r0, [pc, #52]	; (8001324 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80012f0:	f7fe ff3e 	bl	8000170 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012f4:	480c      	ldr	r0, [pc, #48]	; (8001328 <LoopForever+0x6>)
  ldr r1, =_edata
 80012f6:	490d      	ldr	r1, [pc, #52]	; (800132c <LoopForever+0xa>)
  ldr r2, =_sidata
 80012f8:	4a0d      	ldr	r2, [pc, #52]	; (8001330 <LoopForever+0xe>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012fc:	e002      	b.n	8001304 <LoopCopyDataInit>

080012fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001302:	3304      	adds	r3, #4

08001304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001308:	d3f9      	bcc.n	80012fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130a:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <LoopForever+0x12>)
  ldr r4, =_ebss
 800130c:	4c0a      	ldr	r4, [pc, #40]	; (8001338 <LoopForever+0x16>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001310:	e001      	b.n	8001316 <LoopFillZerobss>

08001312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001314:	3204      	adds	r2, #4

08001316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001318:	d3fb      	bcc.n	8001312 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800131a:	f000 f811 	bl	8001340 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800131e:	f7ff ff97 	bl	8001250 <main>

08001322 <LoopForever>:

LoopForever:
    b LoopForever
 8001322:	e7fe      	b.n	8001322 <LoopForever>
  ldr   r0, =_estack
 8001324:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800132c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001330:	080013a8 	.word	0x080013a8
  ldr r2, =_sbss
 8001334:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001338:	200000a4 	.word	0x200000a4

0800133c <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800133c:	e7fe      	b.n	800133c <ADC3_IRQHandler>
	...

08001340 <__libc_init_array>:
 8001340:	b570      	push	{r4, r5, r6, lr}
 8001342:	2600      	movs	r6, #0
 8001344:	4d0c      	ldr	r5, [pc, #48]	; (8001378 <__libc_init_array+0x38>)
 8001346:	4c0d      	ldr	r4, [pc, #52]	; (800137c <__libc_init_array+0x3c>)
 8001348:	1b64      	subs	r4, r4, r5
 800134a:	10a4      	asrs	r4, r4, #2
 800134c:	42a6      	cmp	r6, r4
 800134e:	d109      	bne.n	8001364 <__libc_init_array+0x24>
 8001350:	f000 f81a 	bl	8001388 <_init>
 8001354:	2600      	movs	r6, #0
 8001356:	4d0a      	ldr	r5, [pc, #40]	; (8001380 <__libc_init_array+0x40>)
 8001358:	4c0a      	ldr	r4, [pc, #40]	; (8001384 <__libc_init_array+0x44>)
 800135a:	1b64      	subs	r4, r4, r5
 800135c:	10a4      	asrs	r4, r4, #2
 800135e:	42a6      	cmp	r6, r4
 8001360:	d105      	bne.n	800136e <__libc_init_array+0x2e>
 8001362:	bd70      	pop	{r4, r5, r6, pc}
 8001364:	f855 3b04 	ldr.w	r3, [r5], #4
 8001368:	4798      	blx	r3
 800136a:	3601      	adds	r6, #1
 800136c:	e7ee      	b.n	800134c <__libc_init_array+0xc>
 800136e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001372:	4798      	blx	r3
 8001374:	3601      	adds	r6, #1
 8001376:	e7f2      	b.n	800135e <__libc_init_array+0x1e>
 8001378:	080013a0 	.word	0x080013a0
 800137c:	080013a0 	.word	0x080013a0
 8001380:	080013a0 	.word	0x080013a0
 8001384:	080013a4 	.word	0x080013a4

08001388 <_init>:
 8001388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800138a:	bf00      	nop
 800138c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800138e:	bc08      	pop	{r3}
 8001390:	469e      	mov	lr, r3
 8001392:	4770      	bx	lr

08001394 <_fini>:
 8001394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001396:	bf00      	nop
 8001398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800139a:	bc08      	pop	{r3}
 800139c:	469e      	mov	lr, r3
 800139e:	4770      	bx	lr
